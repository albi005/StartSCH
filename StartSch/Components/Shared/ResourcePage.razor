@using System.Diagnostics.CodeAnalysis
@using System.Security.Claims
@inject IAuthorizationService AuthorizationService

@code {
    // Base component that helps with loading/not found/unauthenticated/unauthorized states for resources
    //
    // NOTE: Authorization doesn't currently support replacing or modifying (the meaning of) the resource.
    //
    // Status codes don't work when using streaming rendering.
    // Pages that inherit ResourcePage probably shouldn't enable streaming rendering.
    // https://developers.google.com/search/docs/crawling-indexing/javascript/javascript-seo-basics#avoid-soft-404s

    private Task? _loadingTask;

    private (object Resource, Task<ResourceUnavailabilityStatus?> AuthorizeTask)? _cache;

    [CascadingParameter] public required Task<AuthenticationState> AuthenticationState { get; set; }
    [CascadingParameter] private HttpContext? HttpContext { get; set; }

    /// Returns authentication information about the current user.
    /// <remarks>
    /// Enables writing
    /// <c>await User</c> instead of having to write
    /// <c>(await AuthenticationState).User</c>
    /// </remarks>
    [field: MaybeNull] protected Task<ClaimsPrincipal> User => field ??= AuthenticationState.ContinueWith(t => t.Result.User);

    protected bool IsResourceAvailable(
        [NotNullWhen(true)] object? resource,
        IAuthorizationRequirement? requirement,
        [NotNullWhen(false)] out ResourceUnavailabilityStatus? unavailableStatus)
    {
        if (resource == null)
        {
            unavailableStatus = _loadingTask?.IsCompleted ?? false
                ? ResourceUnavailabilityStatus.NotFound
                : ResourceUnavailabilityStatus.Loading;
            if (unavailableStatus == ResourceUnavailabilityStatus.NotFound)
                TrySetStatusCode(404);
            return false;
        }

        _cache ??= (resource, Authorize(resource, requirement));

        if (_cache.Value.Resource != resource)
            throw new NotSupportedException("Replacing the resource is not supported");

        if (!_cache.Value.AuthorizeTask.IsCompleted)
        {
            unavailableStatus = ResourceUnavailabilityStatus.Loading;
            return false;
        }

        unavailableStatus = _cache.Value.AuthorizeTask.Result;

        // ReSharper disable once ConvertIfStatementToSwitchStatement
        if (unavailableStatus == ResourceUnavailabilityStatus.Unauthenticated)
            TrySetStatusCode(401);
        else if (unavailableStatus == ResourceUnavailabilityStatus.Unauthorized)
            TrySetStatusCode(403);

        return unavailableStatus == null;
    }

    private async Task<ResourceUnavailabilityStatus?> Authorize(object resource, IAuthorizationRequirement? requirement)
    {
        if (requirement == null)
            return null;
        var authenticationState = await AuthenticationState;
        var authorizationResult = await AuthorizationService.AuthorizeAsync(
            authenticationState.User,
            resource,
            requirement);
        if (authorizationResult.Succeeded)
            return null;
        return (authenticationState.User.Identity is not { IsAuthenticated: true })
            ? ResourceUnavailabilityStatus.Unauthenticated
            : ResourceUnavailabilityStatus.Unauthorized;
    }

    // Assume the resource is loading if OnInitializedAsync is running.
    // base.SetParametersAsync calls OnInitializedAsync the first time it is called, hook into it
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var task = base.SetParametersAsync(parameters);
        _loadingTask ??= task;
        await task;
        // Prerendering is considered finished when SetParametersAsync is finished,
        // so we await the authorization task and call StateHasChanged before returning.
        if (_cache != null)
            await _cache.Value.AuthorizeTask;
        StateHasChanged();
    }

    private void TrySetStatusCode(int statusCode)
    {
        if (HttpContext is { Response.HasStarted: false })
            HttpContext.Response.StatusCode = statusCode;
    }

}