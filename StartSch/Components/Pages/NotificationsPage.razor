@page "/notifications"
@using System.Diagnostics
@using Microsoft.EntityFrameworkCore
@using StartSch.Auth
@using StartSch.Data
@using StartSch.Services
@using StartSch.Wasm
@inject IDbContextFactory<Db> DbFactory
@inject TagService TagService

<PageTitle>Értesítések</PageTitle>
<h1>Értesítések</h1>

<AuthorizeView>
    <NotAuthorized>
        A beállítások módosítása előtt jelentkezz be:
        <div style="margin: 16px 16px 32px;">
            <LogInAndReturnButton/>
        </div>
    </NotAuthorized>
</AuthorizeView>

<div style="display: flex; gap: 48px">
    @*https://github.com/dotnet/aspnetcore/issues/53129*@
    <EditForm Enhance Model="Model" FormName="SaveNotificationPreferences" OnValidSubmit="@Save">
        <div data-permanent> @* Keep state after submitting *@
            <InteractivePreferencesFormFields
                Tags="@_tags"
                FormParameterName="Model.Tags"
                SavedTags="@_savedTags"/>
        </div>
    </EditForm>

    <div>
        <b>Database</b>
        @foreach (var tag in _savedTags)
        {
            <p>@tag</p>
        }
    </div>
</div>

@code {

    private List<TagGroup> _tags = [];

    [SupplyParameterFromForm] private NotificationPreferences? Model { get; set; }
    private List<string> _savedTags = [];

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    protected override void OnInitialized() => Model ??= new();

    protected override async Task OnInitializedAsync()
    {
        _tags = await TagService.GetTags();

        if (AuthenticationState == null) return;
        var auth = await AuthenticationState;
        if (auth.User.Identity?.IsAuthenticated != true) return;
        Guid userId = auth.User.GetAuthSchId() ?? throw new UnreachableException();

        await using Db db = await DbFactory.CreateDbContextAsync();
        _savedTags = await db.UserTagSelections
            .Where(r => r.UserId == userId)
            .Select(r => r.Tag.Path)
            .ToListAsync();
    }

    public class NotificationPreferences
    {
        public string? Tags { get; set; }
    }

    private async Task Save()
    {
        if (Model?.Tags == null || AuthenticationState == null)
            return;
        var auth = await AuthenticationState;
        if (auth.User.Identity?.IsAuthenticated != true)
            return;

        Guid userId = auth.User.GetAuthSchId() ?? throw new UnreachableException();
        List<string> selectedPaths = await TagService.GetValidTags(Model.Tags.Split(','));

        Db db = await DbFactory.CreateDbContextAsync();
        User user = await db.Users
                        .Include(u => u.Tags)
                        .FirstOrDefaultAsync(u => u.Id == userId)
                    ?? db.Users.Add(new() { Id = userId }).Entity;
        user.Tags.Clear();
        user.Tags.AddRange(await db.Tags.Where(t => selectedPaths.Contains(t.Path)).ToListAsync());
        user.Tags.AddRange(
            selectedPaths
                .Except(user.Tags.Select(t => t.Path))
                .Select(t => new Tag(t))
        );
        await db.SaveChangesAsync();
        _savedTags = selectedPaths;
    }

}