@page "/admin/pincer/{GroupId:int}/new-post"
@using Microsoft.EntityFrameworkCore
@using StartSch.Data
@using StartSch.Services

@rendermode InteractiveServer
@inject IServiceProvider Services
@inject IDbContextFactory<Db> DbFactory
@attribute [PincerGroupAdminRequirement]

@{
    TextContent content = new(_model.ContentMarkdown, _model.ExcerptMarkdown);
    Post post = new()
    {
        Title = _model.Title,
        ExcerptMarkdown = _model.ExcerptMarkdown,
        ContentMarkdown = _model.ContentMarkdown,
        Groups = { _group ?? new() },
        CreatedUtc = default,
    };
}

<div style="display: flex; gap: 32px">
    <div style="flex: 1">
        <h2>Új poszt</h2>

        <EditForm Model="@_model" OnValidSubmit="@Submit" FormName="NewPost">

            <div>
                <label>
                    <span style="display: block">
                        Nyitás
                    </span>
                    <InputSelect @bind-Value="@_model.OpeningId">
                        @foreach (var opening in _openings)
                        {
                            <option value="@opening.Id">
                                @opening.Title - @Utils.FormatDateRange(opening.StartUtc, opening.EndUtc)
                            </option>
                        }
                    </InputSelect>
                </label>
            </div>

            <div>
                <label>
                    <span style="display: block">
                        Cím
                    </span>
                    <InputText @bind-Value="@_model.Title"/>
                </label>
            </div>

            <div>
                <label>
                    <span style="display: block">
                        Tartalom
                        <small>(Markdown/HTML)</small>
                    </span>
                    <InputTextArea
                        style="min-height: 256px; font-family: monospace"
                        @bind-Value="@_model.ContentMarkdown"/>
                </label>
            </div>

            <div>
                <label>
                    <span style="display: block">
                        Kivonat <small>(opcionális)</small>
                    </span>
                    <InputTextArea
                        style="min-height: 128px; font-family: monospace"
                        @bind-Value="@_model.ExcerptMarkdown"/>
                </label>
            </div>

            <FilledButton OnClick="@(() => _publish = true)" type="submit" style="margin-top: 16px">
                Közzététel
            </FilledButton>
            <TextButton OnClick="@(() => _publish = false)" type="submit" style="margin-top: 16px">
                Mentés későbbre
            </TextButton>
        </EditForm>
    </div>

    <div style="
            background-color: var(--md-sys-color-surface-dim); border-radius: 48px; padding: 16px;
            flex: 1; align-self: flex-start;
            ">

        @* Open Android notification *@
        <span>Android értesítés</span>
        <div style="
                background-color: var(--md-sys-color-surface-container-high);
                border-radius: 28px;
                padding: 52px 22px 52px 52px;
                max-width: 400px;
                box-sizing: border-box;
                margin: 0 auto;
                ">
            <h4 class="roboto-medium" style="margin: 0 128px 8px 0; font-size: 18px">
                @(_model.Title)
            </h4>
            <p class="roboto-regular"
               style="
                    color: var(--md-sys-color-on-surface-variant);
                    white-space: pre-wrap;
                    margin: 4px 0 0 0;
                    font-size: 15px;
                    max-height: 10lh;
                    overflow: hidden">
                @content.TextExcerpt
            </p>
        </div>

        @* Home page post *@
        <span>StartSCH főoldal</span>
        <div style="background-color: var(--md-sys-color-background); padding: 32px; border-radius: 32px">
            <PostPreview Post="@post" />
        </div>

        @* Post page *@
        <span>StartSCH poszt</span>
        <div style="background-color: var(--md-sys-color-background); padding: 32px; border-radius: 32px">
            <PostView Post="@post" />
        </div>

    </div>
</div>

@code {
    private IEnumerable<Opening> _openings = [];
    private Group? _group;
    private bool _publish;

    private readonly NewPostModel _model = new();

    [Parameter] public int GroupId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using Db db = await DbFactory.CreateDbContextAsync();
        _group = await db.Groups.FindAsync(GroupId); // TODO: Handle group not found
        _openings = await db.Openings
            .Include(o => o.Groups)
            .Where(o => o.Groups.Any(g => g.Id == GroupId))
            .OrderByDescending(o => o.StartUtc)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
    }

    private async Task Submit()
    {
        // TODO: Validate form

        await using var scope = Services.CreateAsyncScope();
        var pushService = scope.ServiceProvider.GetRequiredService<PushService>();
        TextContent content = new(_model.ContentMarkdown, _model.ExcerptMarkdown);

        await using Db db = await DbFactory.CreateDbContextAsync();
        db.Attach(_group!);
        // TODO: Connect Post to Event/Opening
        Post post = new()
        {
            Title = _model.Title,
            ExcerptMarkdown = _model.ExcerptMarkdown,
            ContentMarkdown = _model.ContentMarkdown,
            Groups = { _group! },
            CreatedUtc = DateTime.UtcNow,
        };
        if (_publish)
            post.PublishedUtc = DateTime.UtcNow;
        db.Posts.Add(post);
        await db.SaveChangesAsync();

        if (_publish)
            await pushService.SendNotification(
                new(_model.Title, content.TextExcerpt, null, $"https://start.sch.bme.hu/posts/{post.Id}"),
                [
                    $"push.pincér.hírek.{_group!.PincerName}",
                ]
            );
    }

    public class NewPostModel
    {
        [MinLength(5)] public string Title { get; set; } = "";
        [MinLength(5)] public string ExcerptMarkdown { get; set; } = "";
        [MinLength(5)] public string ContentMarkdown { get; set; } = "";
        public int? OpeningId { get; set; }
    }

}